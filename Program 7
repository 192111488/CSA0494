#include <stdio.h>
#include <stdlib.h>

#define MAX_PROCESS 10

// Process structure
typedef struct {
    int process_id;
    int arrival_time;
    int burst_time;
    int turnaround_time;
    int waiting_time;
} Process;

// Function to calculate turnaround time and waiting time for each process
void calculateTimes(Process processes[], int n) {
    int total_waiting_time = 0;

    // First process has 0 waiting time
    processes[0].waiting_time = 0;

    // Calculate waiting time for each process
    for (int i = 1; i < n; i++) {
        processes[i].waiting_time = processes[i - 1].waiting_time + processes[i - 1].burst_time;
        total_waiting_time += processes[i].waiting_time;
    }

    // Calculate turnaround time for each process
    for (int i = 0; i < n; i++) {
        processes[i].turnaround_time = processes[i].burst_time + processes[i].waiting_time;
    }
}

// Function to calculate average turnaround time and average waiting time
void calculateAverageTimes(Process processes[], int n, float *avg_turnaround_time, float *avg_waiting_time) {
    int total_turnaround_time = 0, total_waiting_time = 0;

    for (int i = 0; i < n; i++) {
        total_turnaround_time += processes[i].turnaround_time;
        total_waiting_time += processes[i].waiting_time;
    }

    *avg_turnaround_time = (float)total_turnaround_time / n;
    *avg_waiting_time = (float)total_waiting_time / n;
}

// Function to select the process with the shortest burst time
int selectShortestJob(Process processes[], int n) {
    int shortest_job_index = 0;
    int shortest_job_time = processes[0].burst_time;

    for (int i = 1; i < n; i++) {
        if (processes[i].burst_time < shortest_job_time) {
            shortest_job_time = processes[i].burst_time;
            shortest_job_index = i;
        }
    }

    return shortest_job_index;
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    if (n <= 0 || n > MAX_PROCESS) {
        printf("Invalid number of processes.\n");
        return 1;
    }

    Process processes[MAX_PROCESS];

    // Input process details
    for (int i = 0; i < n; i++) {
        printf("Enter arrival time and burst time for process %d: ", i + 1);
        scanf("%d %d", &processes[i].arrival_time, &processes[i].burst_time);
        processes[i].process_id = i + 1;
    }

    // Sort processes based on arrival time
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (processes[j].arrival_time > processes[j + 1].arrival_time) {
                Process temp = processes[j];
                processes[j] = processes[j + 1];
                processes[j + 1] = temp;
            }
        }
    }

    // Execute processes based on shortest job first
    for (int i = 0; i < n; i++) {
        int shortest_job_index = selectShortestJob(processes, n);
        printf("Executing process %d\n", processes[shortest_job_index].process_id);

        // Update waiting time for subsequent processes
        for (int j = shortest_job_index + 1; j < n; j++) {
            processes[j].waiting_time += processes[shortest_job_index].burst_time;
        }

        // Set burst time of executed process to 0
        processes[shortest_job_index].burst_time = 0;
    }

    // Calculate waiting time and turnaround time
    calculateTimes(processes, n);

    // Calculate average turnaround time and average waiting time
    float avg_turnaround_time, avg_waiting_time;
    calculateAverageTimes(processes, n, &avg_turnaround_time, &avg_waiting_time);

    // Output results
    printf("\nProcess\tArrival Time\tBurst Time\tTurnaround Time\tWaiting Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t%d\t\t%d\t\t\t%d\n", processes[i].process_id, processes[i].arrival_time,
               processes[i].burst_time, processes[i].turnaround_time, processes[i].waiting_time);
    }

    printf("\nAverage Turnaround Time: %.2f\n", avg_turnaround_time);
    printf("Average Waiting Time: %.2f\n", avg_waiting_time);

    return 0;
}
